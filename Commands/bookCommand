package me.ModMakerGroup.SM.Commands;

import java.io.File;
import java.io.IOException;

import me.ModMakerGroup.SM.ServerManager;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Material;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BookMeta;
import org.bukkit.inventory.meta.ItemMeta;

public class bookCommand implements CommandExecutor{

	ServerManager main;	
	
	public bookCommand (ServerManager sm) {
		this.main = sm;
	}

	@Override
	public boolean onCommand(CommandSender cs, Command cmd, String label, String[] args) {
		if (cs instanceof Player) {
			Player p = (Player)cs;
			if (!p.hasPermission("sm.book")) {
				p.sendMessage(ServerManager.prefix + ServerManager.KeineRechte);
			} else {
				if (args.length == 0) {
					p.sendMessage(ChatColor.RED + "Usage: /spawnbook [save|give|spawn]");
				}else if (args.length == 1) {
					if (args[0].equalsIgnoreCase("save")) {
		    				File file = new File("plugins/ServerManager", "book.yml");
		    				if (!file.exists()) {
		    					YamlConfiguration cfgb = YamlConfiguration.loadConfiguration(file);	
		    					ItemMeta meta = p.getItemInHand().getItemMeta();
		    						if (meta instanceof BookMeta) {
		    							BookMeta bm = (BookMeta)meta;
		    							cfgb.set("Book.title", bm.getTitle());
		    							cfgb.set("Book.author", bm.getAuthor());
		    							cfgb.set("Book.pages", bm.getPages());
		    							try {
											cfgb.save(new File("plugins/ServerManager", "book.yml"));
										} catch (IOException e) {}
		    							File filem = null;
		    					    	if (main.getConfig().getString("General.Language").equals("en_EN")) {
		    					    		filem = new File("plugins/ServerManager/Languages", "en_EN.yml");
		    					    	} else if (main.getConfig().getString("General.Language").equals("de_DE")) {
		    					    		filem = new File("plugins/ServerManager/Languages", "de_DE.yml");
		    					    	} else if (main.getConfig().getString("General.Language").equals("es_ES")) {
		    					    		filem = new File("plugins/ServerManager/Languages", "es_ES.yml");
		    					    	}
		    					    	FileConfiguration cfgm = YamlConfiguration.loadConfiguration(filem);	  
		    					    	String bg = cfgm.getString("General.Book saved");
		    				              bg = ChatColor.translateAlternateColorCodes('&', bg);
		    				              p.sendMessage(ServerManager.prefixb + bg);
		    							return true;		    							
		    						} else {
		    							File filem = null;
		    					    	if (main.getConfig().getString("General.Language").equals("en_EN")) {
		    					    		filem = new File("plugins/ServerManager/Languages", "en_EN.yml");
		    					    	} else if (main.getConfig().getString("General.Language").equals("de_DE")) {
		    					    		filem = new File("plugins/ServerManager/Languages", "de_DE.yml");
		    					    	} else if (main.getConfig().getString("General.Language").equals("es_ES")) {
		    					    		filem = new File("plugins/ServerManager/Languages", "es_ES.yml");
		    					    	}
		    					    	FileConfiguration cfgm = YamlConfiguration.loadConfiguration(filem);	  
		    					    	String noBook = cfgm.getString("General.No book in Hand");
		    				            noBook = ChatColor.translateAlternateColorCodes('&', noBook);
		    				            p.sendMessage(ServerManager.prefix + noBook);
		    				            return true;
			    					}
		    				} else {
		    					YamlConfiguration cfgb = YamlConfiguration.loadConfiguration(file);	
		    					ItemMeta meta = p.getItemInHand().getItemMeta();
		    						if (meta instanceof BookMeta) {
		    							BookMeta bm = (BookMeta)meta;
		    							cfgb.set("Book.title", "'" + bm.getTitle() + "'");
		    							cfgb.set("Book.author", "'" + bm.getAuthor() + "'");
		    							cfgb.set("Book.pages", bm.getPages());
		    							cfgb.options().header("You can use &-Codes for the tile and the authors. For the Pages use the Paragraph!");
		    							try {
											cfgb.save(new File("plugins/ServerManager", "book.yml"));
										} catch (IOException e) {}
		    							File filem = null;
		    					    	if (main.getConfig().getString("General.Language").equals("en_EN")) {
		    					    		filem = new File("plugins/ServerManager/Languages", "en_EN.yml");
		    					    	} else if (main.getConfig().getString("General.Language").equals("de_DE")) {
		    					    		filem = new File("plugins/ServerManager/Languages", "de_DE.yml");
		    					    	} else if (main.getConfig().getString("General.Language").equals("es_ES")) {
		    					    		filem = new File("plugins/ServerManager/Languages", "es_ES.yml");
		    					    	}
		    					    	FileConfiguration cfgm = YamlConfiguration.loadConfiguration(filem);	  
		    								String bg = cfgm.getString("General.Book saved");
		    								bg = ChatColor.translateAlternateColorCodes('&', bg);
		    								p.sendMessage(ServerManager.prefixb + bg);
		    								return true;		    							
		    						} else {
		    							File filem = null;
		    					    	if (main.getConfig().getString("General.Language").equals("en_EN")) {
		    					    		filem = new File("plugins/ServerManager/Languages", "en_EN.yml");
		    					    	} else if (main.getConfig().getString("General.Language").equals("de_DE")) {
		    					    		filem = new File("plugins/ServerManager/Languages", "de_DE.yml");
		    					    	} else if (main.getConfig().getString("General.Language").equals("es_ES")) {
		    					    		filem = new File("plugins/ServerManager/Languages", "es_ES.yml");
		    					    	}
		    					    	FileConfiguration cfgm = YamlConfiguration.loadConfiguration(filem);	  
		    					    	String noBook = cfgm.getString("General.No book in Hand");
		    				            noBook = ChatColor.translateAlternateColorCodes('&', noBook);
		    				            p.sendMessage(ServerManager.prefix + noBook);
		    				            return true;
			    					}
		    				}
						} else if (args[0].equalsIgnoreCase("give") || args[0].equalsIgnoreCase("spawn")) {
		    				File file = new File("plugins/ServerManager", "book.yml");
							if (file.exists()) {
								Inventory inv = p.getInventory();
								YamlConfiguration cfgb = YamlConfiguration.loadConfiguration(file);	
								ItemStack book = new ItemStack(Material.WRITTEN_BOOK, 1);
								BookMeta meta = (BookMeta)book.getItemMeta();
								String title = cfgb.getString("Book.title");
								title = ChatColor.translateAlternateColorCodes('&', title);
								title.replace("'", "");
								meta.setTitle(title);
								String a = cfgb.getString("Book.author");
								a = ChatColor.translateAlternateColorCodes('&', a);
								meta.setAuthor(a);
								meta.setPages(cfgb.getStringList("Book.pages"));
								book.setItemMeta(meta);
								inv.setItem(8, book);
								} else {
									p.sendMessage(ServerManager.prefixb + "§cThere is no Startbook!");
									Bukkit.getConsoleSender().sendMessage(ChatColor.RED + "[ServerManager]: WARNING! You don´t have an Startbook!");
								}
						}
				}
				
			}
			
		}
		return true;
	}
	
}

