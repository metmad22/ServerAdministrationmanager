package de.GamerWorld.SM.Commands;

import java.util.Random;

import org.bukkit.Color;
import org.bukkit.FireworkEffect;
import org.bukkit.FireworkEffect.Type;
import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Firework;
import org.bukkit.entity.Player;
import org.bukkit.inventory.meta.FireworkMeta;

import de.GamerWorld.SM.Main.Main;

public class fireworkCommand implements CommandExecutor{
	
	Main plugin;
	private Type type;

	  public fireworkCommand(Main plugin)
	  {
	    this.plugin = plugin;
	  }

	@Override
	public boolean onCommand(CommandSender cs, Command cmd, String label, String[] args) {
		if (cmd.getName().equalsIgnoreCase("firework")) {
			Player p = (Player)cs;
			if (p == null) {
				return true;
			}
			if (!p.hasPermission("sm.shootfw")) {
				p.sendMessage(Main.prefix + Main.KeineRechte);
			}else{
			if (args.length == 0) {
				Firework fw = (Firework) p.getWorld().spawn(p.getLocation(),Firework.class);
				FireworkMeta fn = fw.getFireworkMeta();
				Random r = new Random();
				int fType = r.nextInt(5) + 1;
				switch (fType) {
				default: 
				case 1:
					type = Type.BALL;
					break;
				case 2:
					type = Type.BALL_LARGE;
					break;
				case 3:
					type = Type.BURST;
					break;
				case 4:
					type = Type.CREEPER;
					break;
				case 5:
					type = Type.STAR;
					break;
				}
				int c1i = r.nextInt(17) + 1;
				int c2i = r.nextInt(17) + 1;
				Color c1 = getColour(c1i);
				Color c2 = getColour(c2i);
				FireworkEffect e = FireworkEffect.builder().flicker(r.nextBoolean()).withColor(c1).withFade(c2).with(type).trail(r.nextBoolean()).build();
				fn.addEffect(e);
				int power = r.nextInt(2)+1;
				fn.setPower(power);
				fw.setFireworkMeta(fn);
			}
			}
		}
		return true;
	}
		
		public Color getColour(int c) {
			switch (c) { 
			default:
			case 1: return Color.AQUA;
			case 2: return Color.BLACK;
			case 3: return Color.BLUE;
			case 4: return Color.FUCHSIA;
			case 5: return Color.GRAY;
			case 6: return Color.GREEN;
			case 7: return Color.LIME;
			case 8: return Color.MAROON;
			case 9: return Color.NAVY;
			case 10: return Color.OLIVE;
			case 11: return Color.ORANGE;
			case 12: return Color.PURPLE;
			case 13: return Color.RED;
			case 14: return Color.SILVER;
			case 15: return Color.TEAL;
			case 16: return Color.WHITE;
			case 17: return Color.YELLOW;
			}
		}
}
